import dayjs from 'dayjs';
import apiClient, { API_ENDPOINTS } from '../config/api';
import { Medication } from '../types/Medication';

/**
 * üîπ L·∫•y danh s√°ch ng∆∞·ªùi cao tu·ªïi
 */
export async function fetchEldersController() {
  try {
    const res = await apiClient.get('/api/elders');
    const raw = res.data?.data || res.data || [];

    return raw.map((item: any) => ({
      elderId: item.elderId || item.id,
      fullName: item.fullName || item.name || '',
      dob: item.dob ? dayjs(item.dob) : null,
      age: item.age ?? null,
      gender: item.gender || '',
      address: item.address || '',
      phone: item.phone || '',
      status: item.status || 'Active',
      
    }));
  } catch (error: any) {
    console.error('‚ùå L·ªói khi load Elders:', error);
    throw new Error(
      error.response?.data?.message || 'Kh√¥ng th·ªÉ t·∫£i danh s√°ch ng∆∞·ªùi cao tu·ªïi'
    );
  }
}

/**
 * üîπ L·∫•y danh s√°ch t·∫•t c·∫£ thu·ªëc
 */
export async function fetchMedications(): Promise<Medication[]> {
  try {
    const res = await apiClient.get('/api/medications');
    const raw = res.data?.data || res.data || [];

    return raw.map((item: any): Medication => ({
      medicationId: item.medicationId || item.medication_id,
      elderId: item.elderId || item.elder_id,
      name: item.name,
      dose: item.dose || '',
      frequency: item.frequency || '',
      time: item.time || null,
      startDate: item.startDate || item.start_date || null,
      endDate: item.endDate || item.end_date || null,
      notes: item.notes || '',
      prescribedBy: item.prescribedBy || item.prescribed_by || null,
      elder: item.elder
        ? {
          elderId: item.elder.elderId || item.elder.elder_id,
          fullName: item.elder.fullName || item.elder.full_name,
          age: item.elder.age,
          gender: item.elder.gender,
          phone: item.elder.phone,
        }
        : undefined,
      prescriber: item.prescriber
  ? {
      userId: item.prescriber.userId || item.prescriber.user_id,
      fullName: item.prescriber.fullName || item.prescriber.full_name || 'B√°c sƒ© kh√¥ng x√°c ƒë·ªãnh',
    }
  : item.prescribedBy
    ? {
        userId: item.prescribedBy,
        fullName: `B√°c sƒ© #${item.prescribedBy}`, // Hi·ªÉn th·ªã t·∫°m n·∫øu kh√¥ng c√≥ t√™n
      }
    : undefined,
    }));
  } catch (error: any) {
    console.error('‚ùå L·ªói khi load medications:', error);
    throw new Error(
      error.response?.data?.message || 'Kh√¥ng th·ªÉ t·∫£i danh s√°ch thu·ªëc'
    );
  }
}

/**
 * üîπ L·∫•y danh s√°ch thu·ªëc theo ng∆∞·ªùi cao tu·ªïi
 */
export async function fetchMedicationsByElder(
  elderId: number
): Promise<Medication[]> {
  try {
    const res = await apiClient.get(`/api/medications/elder/${elderId}`);
    const raw = res.data?.data || res.data || [];

    return raw.map((item: any): Medication => ({
      medicationId: item.medicationId || item.medication_id,
      elderId: item.elderId || item.elder_id,
      name: item.name,
      dose: item.dose || '',
      frequency: item.frequency || '',
      time: item.time || null,
      startDate: item.startDate || item.start_date || null,
      endDate: item.endDate || item.end_date || null,
      notes: item.notes || '',
      prescribedBy: item.prescribedBy || item.prescribed_by || null,
      elder: item.elder
        ? {
          elderId: item.elder.elderId || item.elder.elder_id,
          fullName: item.elder.fullName || item.elder.full_name,
          age: item.elder.age,
          gender: item.elder.gender,
          phone: item.elder.phone,
        }
        : undefined,
      prescriber: item.prescriber
  ? {
      userId: item.prescriber.userId || item.prescriber.user_id,
      fullName: item.prescriber.fullName || item.prescriber.full_name || 'B√°c sƒ© kh√¥ng x√°c ƒë·ªãnh',
    }
  : item.prescribedBy
    ? {
        userId: item.prescribedBy,
        fullName: `B√°c sƒ© #${item.prescribedBy}`, // Hi·ªÉn th·ªã t·∫°m n·∫øu kh√¥ng c√≥ t√™n
      }
    : undefined,
    }));
  } catch (error: any) {
    console.error('‚ùå L·ªói khi load medications by elder:', error);
    throw new Error(
      error.response?.data?.message || 'Kh√¥ng th·ªÉ t·∫£i danh s√°ch thu·ªëc'
    );
  }
}

/**
 * üîπ L·∫•y chi ti·∫øt 1 thu·ªëc
 */
export async function fetchMedicationDetail(id: number): Promise<Medication> {
  try {
    const res = await apiClient.get(`${API_ENDPOINTS.MEDICATIONS.LIST}/${id}`);
    const item = res.data?.data || res.data;

    return {
      medicationId: item.medicationId || item.medication_id,
      elderId: item.elderId || item.elder_id,
      name: item.name,
      dose: item.dose || '',
      frequency: item.frequency || '',
      time: item.time || null,
      startDate: item.startDate || item.start_date || null,
      endDate: item.endDate || item.end_date || null,
      notes: item.notes || '',
      prescribedBy: item.prescribedBy || item.prescribed_by || null,
      elder: item.elder,
      prescriber: item.prescriber
  ? {
      userId: item.prescriber.userId || item.prescriber.user_id,
      fullName: item.prescriber.fullName || item.prescriber.full_name || 'B√°c sƒ© kh√¥ng x√°c ƒë·ªãnh',
    }
  : item.prescribedBy
    ? {
        userId: item.prescribedBy,
        fullName: `B√°c sƒ© #${item.prescribedBy}`, // Hi·ªÉn th·ªã t·∫°m n·∫øu kh√¥ng c√≥ t√™n
      }
    : undefined,
    };
  } catch (error: any) {
    console.error('‚ùå L·ªói khi load medication detail:', error);
    throw new Error(
      error.response?.data?.message || 'Kh√¥ng th·ªÉ t·∫£i th√¥ng tin thu·ªëc'
    );
  }
}

/**
 * üîπ Th√™m thu·ªëc m·ªõi
 */
export async function createMedication( values: Partial<Medication> ): Promise<Medication> {
  try {
    const payload = {
      elderId: Number(values.elderId), // ƒê·∫£m b·∫£o l√† number
      name: values.name,
      dose: values.dose || undefined,
      frequency: values.frequency || undefined,
      time: values.time || undefined,
      startDate: values.startDate ? dayjs(values.startDate).format('YYYY-MM-DD') : null,
      endDate: values.endDate ? dayjs(values.endDate).format('YYYY-MM-DD') : null,
      notes: values.notes || undefined,
      prescribedBy: values.prescribedBy ? Number(values.prescribedBy) : undefined,
    };

    console.log('üì§ Sending medication payload:', payload);

    const res = await apiClient.post('/api/medications', payload);
    return res.data?.data || res.data;

  } catch (error: any) {
    console.error('‚ùå L·ªói khi t·∫°o medication:', error);
    console.error('‚ùå Error response:', error.response?.data);
    throw new Error( error.response?.data?.message || 'Kh√¥ng th·ªÉ th√™m thu·ªëc m·ªõi' );
  }
}



/**
 * üîπ C·∫≠p nh·∫≠t thu·ªëc
 */
export async function updateMedication(
  id: number,
  values: Partial<Medication>
): Promise<Medication> {
  try {
    const payload = {
      elderId: Number(values.elderId), // ƒê·∫£m b·∫£o l√† number
      name: values.name,
      dose: values.dose || undefined,
      frequency: values.frequency || undefined,
      time: values.time || undefined,
      startDate: values.startDate ? dayjs(values.startDate).format('YYYY-MM-DD') : null,
      endDate: values.endDate ? dayjs(values.endDate).format('YYYY-MM-DD') : null,
      notes: values.notes || undefined,
      prescribedBy: values.prescribedBy ? Number(values.prescribedBy) : undefined,
    };

    console.log('üì§ Updating medication payload:', payload);

    const res = await apiClient.put(`/api/medications/${id}`, payload);
    return res.data?.data || res.data;
  } catch (error: any) {
    console.error('‚ùå L·ªói khi c·∫≠p nh·∫≠t medication:', error);
    console.error('‚ùå Error response:', error.response?.data);
    throw new Error(
      error.response?.data?.message || 'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t thu·ªëc'
    );
  }
}

/**
 * üîπ X√≥a thu·ªëc
 */
export async function deleteMedication(id: number): Promise<void> {
  try {
    await apiClient.delete(`/api/medications/${id}`);
  } catch (error: any) {
    console.error('‚ùå L·ªói khi x√≥a medication:', error);
    throw new Error(error.response?.data?.message || 'Kh√¥ng th·ªÉ x√≥a thu·ªëc');
  }
}